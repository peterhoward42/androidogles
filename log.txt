Android GL Play Around
----------------------

*  Get tutorial to work
*  Start afresh with copy to mess with keeping old as reference
*  Timeout for a second pass of studies
*  Get into github
*  Study and note git from first principles to be confident with branch usage
*  Tag the current commit as the official baseline
*  Make roadmap of ideas
*  Shaders from assets, retest, and commit
*  Dependency inject data for > 1 co-planar triangle
*  Have the camera transform change with time and add triangles out of plane
*  Have different bits of the model use different location transforms
*  Digress redesign for lighting
*  Timeout strip all debug out
*  Create bit of package hierachy
*  Try a STL file source
*  Combine modelcollection with assembler into dynamic scene
*  Ditch num tri qry on dynamic scene - is duplicate of mesh api
*  Change name of qry on mesh from size to numberOfTriangles
*  Can we rename effective radius to make it clearer
*  Ditch blade stl for ip sake
o  More complex model
    o  Work up to animated worm and wheel
        *  Make resource files
        *  Binary reader and unit test
        *  Need to close stream? (no client must)
        *  improve class names
        *  time based sinusoid fails to use pi in calcs
        *  design aspirational model / assr for worm and wheel
        *  do it
            *  Create specialised dynamic scene and select it in activity
            *  Have it read and store stl meshes
            *  Write the whole thing with loads assumptions
            *  Implement and test BoundingBox factory from min max
            *  Implement and test TransformApply.boundingBox
            *  Implement and test BoundingBox.combine()
        *  Quick app test - just see what happens
            *  Something shows
            *  STL bin reader needs unit test to regression the 2 byte short
               read
        *  Move bb into incremental api and give mesh one
        *  Fix up wheel geom etc by disabling and reenabling gradually
            *  Wheel seems transparent, have I got Z depth buffering enabled?
            *  Fix camera temporarily
            *  Make sure move to world centre as v first thing, before
               doing any rotations, and then translate again
               afterwards.
            *  Animate wheel
        *  Fix up worm geom similarly
            *  Basics work
    o  Improve projection
        *  Cautious redesign of camera height, look at, fov, near and far, and
           camera animation
        *  Create 
            *  ScenePerspective class
            *  OnLooker interface
            *  SceneLighting class
        *  Decide What behaviour to gun for?
        *  Choose names and create implementations
            *  OnLookerRubberNecker
        o  Migrate across
            *  List all existing code that must change
            *  Work out and record how new players will pick up respon
            *  Work out ownership and lifecycle graph
            *  Put in skeleton alongside old code
            *  Gradually work up with trivial implementations to get working
            o  fart
            o  Add unit tests as can
                *  XYZf scaledToLength
                *  Viewpoint  getasamplepointinlineofsight
                *  CameraLookAt static method
                *  OnLooker
                *  RubberNecker factory
                *  RubberNecker o  positionattime etc
                *  names for onlooker, rubberxxx, viewingAxis etc, 
                   camera look at
            o  Regression tests
            o  Enrich behaviour to that required
            o  Ditch now redundant code
            o  Ditch non static elements of camera look at
        o  Consider token time variation, even maybe of light color?
    o  When project nice, tweak animation and position params for gears

-----------------------------------------------------------------------------
Onlooker gun for
-----------------------------------------------------------------------------
    o  straight line path
    o  starting distant
    o  getting closer
    o  passing close by side
    o  looking the whole time at some fixed point in the scene - ie looking
       direction is continuously changing
-----------------------------------------------------------------------------
ViewingConditions gun for
-----------------------------------------------------------------------------
    o  fixed, single towards light direction
    o  want proximity to cause scaling, so...
    o  how about inject into query:
        o  scene sphere centre
        o  scene sphere effective radius
        o  onlooker
    o  far is by necessity distance of onlooker to furthest boundary of scene
    o  fov can be fixed at 90 deg
    o  near is gnats in front of onlooker
    o  error if onlooker beyond furthest boundary of scene
-----------------------------------------------------------------------------
Near / Far Fundamentals
-----------------------------------------------------------------------------
    o  Is there a trad answer?
        o  Use a fixed FOV
        o  Set near and far snug to nearest and farthest part of content,
           unless camera is inside scene sphere. In latter case set near to
           zero to clip out stuff behind camera. Of course any content that is
           very close to near in this case will take up whole screen. But
           that's what you'd expect right? Also means that if you move v far
           away in comparison with scene overall size, perspective diminishes.
           But that too is expected.
                   


-----------------------------------------------------------------------------
Existing Code That Must Change
-----------------------------------------------------------------------------
    o  SceneOptics
        o  Currently an amalgam.
        o  Probably replaced by discrete more specialised objects
    o  MyGLRenderer
        o  Will continue to build transform pipelines, but will call on
           services of new objects made available to it.
-----------------------------------------------------------------------------
How New Players Achieve their Mandates?
-----------------------------------------------------------------------------
o  ScenePerspective
    o  Need only calc near and far, which should snugly fit scene, but with
       guard bands to avoid near going negative by being behind camera.
    o  So need current camera position and direction and current scene sphere.
    o  Translate scene centre by distance equal to scene radius in direction
       camera is looking. This provides a point lying on the far plane.
    o  We need the cosine projection of this point onto the viewing vector
       of the camera. I.e. the dot product of it onto a vector leaving the
       camera in the viewing direction.
    o  Need to inject current Viewpoint at time of query.
o  RubberNecker
    o  Need to inject linear path and velocity to constructor, and
       hold these in state.
    o  Need also to inject pointToLookAt similarly.
    o  Can then do time based arithmetic to answer question with help from
       camera look at - possibly has-a one of these constructed with
       pointToLookAt.
o  Lighting
    o  Trivial

-----------------------------------------------------------------------------
Ownership and Lifecycle Graph
-----------------------------------------------------------------------------
    o  Should be created as part of viewing lifecylce, not activity
       maybe on creation. But will need access to dynamic scene.
    o  Create them during construction of MyGLRenderer.

    o  ScenePerspective
    o  RubberNecker
    o  Lighting
