Android GL Play Around
----------------------

*  Get tutorial to work
*  Start afresh with copy to mess with keeping old as reference
*  Timeout for a second pass of studies
*  Get into github
*  Study and note git from first principles to be confident with branch usage
*  Tag the current commit as the official baseline
*  Make roadmap of ideas
*  Shaders from assets, retest, and commit
*  Dependency inject data for > 1 co-planar primitiveTriangle
*  Have the camera transform change with time and add triangles out of plane
*  Have different bits of the model use different location transforms
*  Digress redesign for lighting
*  Timeout strip all debug out
*  Create bit of package hierachy
*  Try a STL file source
*  Combine modelcollection with assembler into dynamic scene
*  Ditch num tri qry on dynamic scene - is duplicate of mesh api
*  Change name of qry on mesh from size to numberOfTriangles
*  Can we rename effective radius to make it clearer
*  Ditch blade stl for ip sake
*  More complex model
*  Fix Artefacts with cuter near and far setting
*  When project nice, tweak animation and position params for gears (will do)
*  Cuter content from grabcad that tests complexity
o  Interpolated normals
    *  Picture to be clear what want to do
    *  Design
    o  Do
        *  Big refactor
        *  Get to compile benignly
        *  Unit and system regression test.
        o  Once working - provide way to stimulate smoothing
            o  Put in Smoothing 
            o  Really working?
            o  Unit test for trivial case
        o  Consider decline to expose read apis unless smoothing has been
           done.

o  Show part of camera frame / self
o  Performance limits

-----------------------------------------------------------------------------
Interpolating gradient
-----------------------------------------------------------------------------
    o  First rationalise winding order like now, and capture facet normal.
    o  Then for each vertex of each primitiveTriangle, find all others triangles that
       share that vertex which pass a tangent continuity threshold test.
       Then ascribe to the first vertex, a normal that is the mean of all of
       the thus captured facet normals.
-----------------------------------------------------------------------------
Design
-----------------------------------------------------------------------------
    o  Triangle should stay the same, including raw vertex coords and
       facet normal. Never throw info away.
    o  Smoothed normals is only a propery of a mesh.
    o  So mesh responsibility is:
        o  To model a collection of triangles
        o  For each thus modelled, to provide access to the original
           primitiveTriangle
        o  For each thus modelled to provide a smoothed vertex normal
           when there is one.
        o  But how address the vertices?
            o  Using their hashing function
            o  So normal for a vertex is stored against its hash

        o  Read api
            o  Current lets you iterate over original triangles,
               all we need in addition is for iteration to include also,
               the corresponding smoothed normals when present

        o  State protection measures
-----------------------------------------------------------------------------
----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
----------------------------------------------------------------------------
