Android GL Play Around
----------------------

Get tutorial to work
    *  Create directory
    *  computing_projects/virtual-reality/android-studio/MyOwnOpenGLProject
    *  Make empty app structure
    *  Add in content from HelloOpenGLES20 bottom up, getting to compile
        *  Java
            *  Triangle
            *  Square
            *  Custom Renderer
            *  Custom gl view
            *  Activity java
        *  Manifest
        *  XML views
    *  Get to compile
    *  Study in detail - mix in own comments
    *  Get to work

Start afresh with copy to mess with keeping old as reference
    *  Think about places and names
    *  Marshall and name what already got in computingproj/virtualreality
    *  Add in context for studio projects
    *  copy studio projects across
    *  refresh shortcuts

*  Timeout - get back to version that works!!!
    *  Create official starter apps folder
    *  Put download somewhere clean with readme that says no work studio
    *  Make viable blank app and make sure works
    *  Alter names of activity, view and folder to match incoming copies (+vv)
    *  Copy in
        *  manifest updates
        *  java
        *  views
        *  get to work

o  Timeout for a second pass of studies
    *  Survey the book again (Munshi et al)
    *  Make notes from open gl learning website
    *  Check out Chris Jackson's book
    *  Make notes from
        http://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study/
        (defer)
    *  See what standard reference shaders are now available = none :-(
    *  Check out Chris Jackson's book (defer)

*  Get into github to avoid this fiasco
*  Study and note git from first principles to be confident with branch usage
*  Tag the current commit as the official baseline
*  Make roadmap of ideas

*  shaders from assets, retest, and commit
    *  revise how to make assets
    *  revise how to retrieve text therefrom
    *  make asset containing vertex and fragment shader code
    *  get src from assets alongside current
        *  Utility to slurp from inputstream to string
        *  Surface view takes a context already so can access assetmgr
        *  Renderer needs a constructor that can take and store assetmgr
        *  Square constructor expect to be given asset mgr handle
        *  Renderer passes asset mgr to Square constructor
    *  does vertex shader work if just use it as read?
    *  does frag shader work if just use it as read?
    *  if works, ditch hard coded and should be no compile warnings
    *  commit and push
    *  tag and push

o  Dependency inject data for > 1 co-planar triangle
    *  Design?
    *  Can we find a keep-it working sequence?
    *  Define world friendly model class and or interface.
    *  Make a factory that simulates existing use case
    *  Define class/interface for drawelements topology
    *  Make factory that goes from triangles to drawelements topo
    *  Make a shader ds container and a factory to pop it from drawelemtopo
    *  Ditch 2s and 4s in favour of consts
    *  Should now plumb in
    *  Get to work
    *  Ditch old rendererable triangle redundant code
    *  Ditch legacy triangle
    o  Checkin

-----------------------------------------------------------------------------
What want to be clean and abstract?
-----------------------------------------------------------------------------
    o  World friendly model - collection of triangles, with each defined as
       three independent vertices.
    o  Factories to make these from higher level ideas like cylinder or block.
    o  Something to extract alternate topology from this - that gives
       single column vector of vertex structures, and sister vector of seq2
       that picks out triangles to draw.
    o  Something that packs the above in float/short buffers ready for shader
       consumption.
    o  Where ensure ccw order? or alternative?
-----------------------------------------------------------------------------
Keep it working order
-----------------------------------------------------------------------------
    o  Define world friendly model class and or interface.
    o  Make a factory that simulates existing use case
    o  Define class/interface for drawelements topology
    o  Make factory that goes from triangles to drawelements topo
    o  Make a shader ds container and a factory to pop it from drawelemtopo
    o  Should now plumb in
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

High level synths will want to pump triangles piecemeal into the collection:

    collection.Add(ITriangle)

ITriangle offers
    float[3] getVerticesSorted()


-----------------------------------------------------------------------------
